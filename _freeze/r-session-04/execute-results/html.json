{
  "hash": "78f170ffa6aab334808e9d275eb2e04f",
  "result": {
    "engine": "knitr",
    "markdown": "---\nsubtitle: \"Stochastic SIR models\"\nabstract-title: \"\"\nabstract: |\n    *review of basic algorithms for stochastic epidemic models*\nexecute:\n    warning: false\nmetadata-files:\n    - metadata/matthewferrari.yml\n    - metadata/mathjax-packages.yml\neditor:\n  markdown:\n    wrap: sentence\n---\n\n# R Session 04\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(rio)\nlibrary(deSolve)\nlibrary(tidyverse)\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_minimal())\n```\n:::\n\n\n\n## What is stochasticity and where does it come from?\n\nMuch of the world is uncertain (i.e. we don't know exactly how things work, what values are, or what tomorrow will hold).\nSome of that uncertainty is, at least theoretically, knowable and some is not. \nFor example, in our discussion of estimating $R_0$, there may be a very real $R_0$ for a given population and pathogen, even if we don't know it. \nThus, our estimate of $R_0$ may be \"uncertain\" (e.g. has a confidence interval around it, reflecting our certainty), but the models we've been developing so far are \"deterministic\", so conditional on a given value of $R_0$ the resulting epidemic curve is exactly specified by the model.\nIf we return to the code from R-session 1, we can plot a single deterministic realization of a model with $R_0 = 1.8$.\n\n::: {.cell}\n\n```{.r .cell-code}\nsir_model <- function(time, state, params, ...) {\n  transmission <- params[\"transmission\"]\n  recovery <- 1 / params[\"duration\"]\n\n  S <- state[\"S\"]\n  I <- state[\"I\"]\n  R <- state[\"R\"]\n\n  dSdt <- -transmission * S * I\n  dIdt <- (transmission * S * I) - (recovery * I)\n  dRdt <- recovery * I\n\n  return(list(c(dSdt, dIdt, dRdt)))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsir_params <- c(transmission = 0.3, duration = 6)\nsir_init_states <- c(S = 0.99, I = 0.01, R = 0)\nsim_times <- seq(0, 200, by = 0.1)\n\nsir_sol <- deSolve::ode(\n  y = sir_init_states,\n  times = sim_times,\n  func = sir_model,\n  parms = sir_params\n)\n```\n:::\n\n::: {.cell .column-body}\n\n```{.r .cell-code}\n# Turn the output from the ODE solver into a tibble (dataframe)\n# so we can manipulate and plot it easily\nsir_sol_df <- as_tibble(sir_sol) %>%\n  # Convert all columns to numeric (they are currently type\n  # deSolve so will produce warnings when plotting etc)\n  mutate(\n    # Rather than repeatedly type the same function for every\n    # column, use the across() function to apply the function\n    # to a selection of columns\n    across(\n      # The cols argument takes a selection of columns to apply\n      # a function to. Here, we want to apply the as.numeric()\n      # function to all columns, so we use the function\n      # everything() to select all columns.\n      .cols = everything(),\n      .fns = as.numeric\n    )\n  ) %>%\n  # Convert the dataframe from wide to long format, so we have a\n  # column for the time, a column for the state, and a column\n  # for the proportion of the population in that state at that\n  # time\n  pivot_longer(\n    # Don't pivot the time column\n    cols = -time,\n    names_to = \"state\",\n    values_to = \"proportion\"\n  ) %>%\n  # Update the state column to be a factor, so the plot will\n  # show the states in the correct order\n  mutate(state = factor(state, levels = c(\"S\", \"I\", \"R\")))\n\nSIRcolors <- c(S = \"#1f77b4\", I = \"#ff7f0e\", R = \"#FF3851\")\n\nggplot(sir_sol_df, aes(x = time, y = proportion, color = state)) +\n  geom_line(linewidth = 1.5) +\n  scale_color_manual(values = SIRcolors) +\n  labs(\n    x = \"Time\",\n    y = \"Fraction\",\n    color = \"State\"\n  ) +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](r-session-04_files/figure-html/unnamed-chunk-5-1.png){width=100%}\n:::\n:::\n\nNow, perhaps we used the tools from R-session 3 to estimate $R_0$ and we think a reasonable $95\\%$ confidence interval for $R_0$ is $(1.7,1.9)$. \nIf we're quite certain the duration of infection is 6 days, then that means our corresponding confidence interval on the transmission rate is $(.283,.317)$.\nAn entirely reasonble way to represent this uncertainty in the estimate of the transmission rate is to generate many random draws from within the confidence interval for the transmission rate and examine the resulting epidemic curves.\nFor this we can modify the code above with a loop that does this $M$ times. \n\n::: {.cell}\n\n```{.r .cell-code}\nM <- 100 # the number of times we want to do this. \n        # This is a mater of choice and computational capacity (this model is small and quick, but that won't always be the case)\n\n#since we're going to do this M times we need a place to store the results\n\nfor(m in 1:M){\n  sir_params <- c(transmission = runif(1,.283,.317), duration = 6) # each time take a random draw of the transmission rate from the confidence interval\n  sir_init_states <- c(S = 0.99, I = 0.01, R = 0)\n  sim_times <- seq(0, 200, by = 0.1)\n\n  sir_sol <- deSolve::ode(\n    y = sir_init_states,\n    times = sim_times,\n    func = sir_model,\n    parms = sir_params\n  )\n  sir_sol = data.frame(sir_sol)\n  sir_sol$iteration = m   # mark this as the mth iteration of the loop\n  #if this is the first iteration, create a place to store the output\n  #if it's the sencond or higher, append the output to the storage\n  if(m==1){sir_sol_storage <- sir_sol}\n  if(m>1){sir_sol_storage <- rbind(sir_sol_storage,sir_sol)}\n}\n```\n:::\n\n\n::: {.cell .column-body}\n\n```{.r .cell-code}\n# Turn the output from the ODE solver into a tibble (dataframe)\n# so we can manipulate and plot it easily\nsir_sol_df <- as_tibble(sir_sol_storage) %>%\n  # Convert all columns to numeric (they are currently type\n  # deSolve so will produce warnings when plotting etc)\n  mutate(\n    # Rather than repeatedly type the same function for every\n\n    # column, use the across() function to apply the function\n    # to a selection of columns\n    across(\n      # The cols argument takes a selection of columns to apply\n      # a function to. Here, we want to apply the as.numeric()\n      # function to all columns, so we use the function\n      # everything() to select all columns.\n      .cols = everything(),\n      .fns = as.numeric\n    )\n  ) %>%\n  # Convert the dataframe from wide to long format, so we have a\n  # column for the time, a column for the state, and a column\n  # for the proportion of the population in that state at that\n  # time\n  pivot_longer(\n    # Don't pivot the time column\n    cols = -c(time,iteration),\n    names_to = \"state\",\n    values_to = \"proportion\"\n  ) %>%\n  # Update the state column to be a factor, so the plot will\n  # show the states in the correct order\n  mutate(state = factor(state, levels = c(\"S\", \"I\", \"R\")))\n\nSIRcolors <- c(S = \"#1f77b4\", I = \"#ff7f0e\", R = \"#FF3851\")\n\nggplot(sir_sol_df, aes(x = time, y = proportion, color = state, group=interaction(iteration, state))) +\n  geom_line(linewidth = 1.5, alpha=.1) +\n  scale_color_manual(values = SIRcolors) +\n  labs(\n    x = \"Time\",\n    y = \"Fraction\",\n    color = \"State\"\n  ) +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](r-session-04_files/figure-html/unnamed-chunk-7-1.png){width=100%}\n:::\n:::\n\n\nHere note that we are still using our original code for the SIR model, so first we randomly draw the transmission rate, then conditional on that value, we run the deterministic model. \nNote that each run of the model still has the smooth curves, but each draw is a different set of smooth curves. \n\nThere are lots of ways you could extend this. Note that since we are drawing the transmission rate and fixing the duration of infection, the $R_0$ is slightly different in each simulation. \nYou could make each run have the same $R_0$ by recalculating the duration of infection based on the random draw of transmission rate; e.g. $R_0=1.8 = 0.29 * L$ means that $L=5.5$, so to ensure $R_0$ is the same in each run, you would to change $L$ for each random draw. \nAlternatively, you might have uncertainty about \\emph{both} transmission and duration, so could for e.g. make random draws for both (which would again give a setting where $R_0$ varies from run to run). \nNone of these are more correct than another, the use case depends on which elements $R_0$, transmission, duration of infection, you are uncertain about. \n\nIn each of the above, the model is \\emp{deterministic}, meaning that for a given set of parameters, the resulting outbreak trajectory is always the same. For a \\emph{stochastic} model, each run of the model will vary, even if the parameters are the same. \nThis is because each event that occurs (e.g. someone getting infected or recovering) is analogous to a coin flip; even though the rules of the coin (the parameters) are always the same, the side it lands on is random. \nUnlike a deterministic model, to fully understand the behavior of a stochastic model, you need to run it more than one time, often many times, so these are necessarily more time consuming to work with.\n\nThere are many, many ways to make stochastic models and the steps can be way more complicated than flipping coins. \nBut there some foundational versions of these models that illustrate the trade-offs between exact representations of the random processes we think are happening and the computational time it takes to generate outputs. For what we'll do here, everything will be kind of fast, but in practice, for models of realistic scale, even a single stochastic run can take a while. And if you have to do thousands of runs, even shaving a few seconds or minutes can be important. \n\n## The Gillespie Algorithm\n\nThe Gillespie algorithm is the most explicit translation of the ODE form of the SIR model into a stochastic model. \nIt achieves this by noting that ODE-based models are written in terms of the rates at which events occur. \nAt any given point in time, the rate of all events in the ODE is known; what \\bf{isn't} known, is which of the possible events will happen first.\nNote that even though we expect that the next thing to happen will be the thing that happens with the highest rate, it's possible that another thing may happen first by random chance. \nAnd then, since the rates in the SIR model are dependent on the value of the states (e.g. new infections depend on $\\beta$ and S and I) any change in the states then changes the rates and the likelihood of what will happen next. \n\nThe Gillespie algorithm proceeds by 1) calculating all the current rates, 2) randomly drawing exponential random variables that equate to the time until each event happens (recall we talked about the relationship between rate and time in the lectures), then 3) comparing those times and assuming that the next event to occur is the one that had the smallest randomly drawn time. \nThen you increment the states; e.g. an infection increases I by 1, reduces S by 1, and doesn't change R. \nImportantly, you then increment time forward by a step equal to the time until first event occurred. \nThen you recalculate the rates and randomly draw times, etc, and keep doing this over and over again.\nFor this SIR model, that keeps happening until you run out of infected individuals and there are no new events that can happen.\n\n::: {.cell}\n\n```{.r .cell-code}\n###############################################################################\n# Parameters and initial conditions                                            #\n###############################################################################\n\nS <- 998           # number susceptible\nI <- 1              # number infected\nR <- 1              # number recovered\ntime <- 0\n\nbeta <- .5           # transmission rate\ngamma <- 1/7        # recovery rate\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n###############################################################################\n# Gillespie Step                                                              #\n###############################################################################\ngilstep <- function(SIR, beta, gamma){\n  # SIR is a vector containing 4 elements \n  #   S = scalar number of susceptibles now\n  #   I = scalar number of infecteds now\n  #   R = scalar number of recovereds now\n  #   time = current time\n  # beta = transmission rate\n  # gamma = recovery rate\n  \n  times <- rexp(2, # draw two random exponential variables\n                c(beta * SIR[1] * SIR[2]/sum(SIR[1:3]),  # the first is the rate of new infections: S*Beta*I/N\n                     SIR[2] * gamma)) # the second is the rate of new recoveries: I*gamma\n  \n  return(list(\n    change_state = which.min(times), # which.min identifies which of the two random variables is smallest, and thus the first to happen: this is the transition that we'll mae\n              timestep = min(times))) # this identfies how much time elapsed before the transition occured, so we can increment time forward\n}\n```\n:::\n\nThe gilstep() function increments the states forward by 1 event. Which event happens first, and the time it takes for that event to happen are both random variables. We then need to do this many times. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n###############################################################################\n# Simulate over time                                                          #\n###############################################################################\nset.seed(101)               # here we set the random seed. This isn't necessary in general, but it allows us to write a \"random\" simulation\n                            # always returns the same result. For the purposes of this lesson it is useful because (as you'll see below)\n                            # we can get random realizations of an outbreak where the first case recovers before they infect anyone and \n                            # there is no epidemic to plot. This can happen (rarely) even with R0>1. \ncounter <- 0                # set counter at 0\nwhile(all(I>0)){            #continue until I is depleted\n  counter <- counter + 1    #counter for number of transitions: we don't know how many transitions will happen until the simulation is over\n  # \n  SIRtmp <- c(S[counter], I[counter], R[counter], time[counter])       #current SIR states\n  step <- gilstep(SIRtmp, beta, gamma)\n  if(step$change_state ==1){    # if transition is an infection, reduce S and increase I\n    SIRtmp[1] <- SIRtmp[1] - 1\n    SIRtmp[2] <- SIRtmp[2] + 1 \n  }\n  if(step$change_state ==2){    # if transition is an recovery, reduce I and increase R\n    SIRtmp[2] <- SIRtmp[2] - 1\n    SIRtmp[3] <- SIRtmp[3] + 1 \n  }\n  SIRtmp[4] <- SIRtmp[4] + step$timestep      # increment time\n    \n#Append changes\n  S <- c(S,SIRtmp[1])\n  I <- c(I,SIRtmp[2])\n  R <- c(R,SIRtmp[3])\n  time <- c(time,SIRtmp[4])\n\n  #cat(S[counter],\"-\",I[counter],\"-\",R[counter],\"-\",time[counter], \".\\n\"). # this prints the output as it goes\n  set.seed(NULL)          # reset the seed so that every subsequent simulation IS random\n}\n```\n:::\n\n\nWe can now plot the one realization of this stochastic outbreak. Notice that it has the same general shape as the deterministic outbreak, but is no longer smooth because each individual event over time happens randomly. \n\n::: {.cell .column-body}\n\n```{.r .cell-code}\n# Reuse the plotting code from above\n\n# Turn the output from gilstep() into a tibble (dataframe)\n# so we can manipulate and plot it easily\ngil_df <- tibble(time, S, I, R) %>%  # put elements in a data frame \n  # Convert all columns to numeric (they are currently type\n  # deSolve so will produce warnings when plotting etc)\n  mutate(\n    # Rather than repeatedly type the same function for every\n    # column, use the across() function to apply the function\n    # to a selection of columns\n    across(\n      # The cols argument takes a selection of columns to apply\n      # a function to. Here, we want to apply the as.numeric()\n      # function to all columns, so we use the function\n      # everything() to select all columns.\n      .cols = everything(),\n      .fns = as.numeric\n    )\n  ) %>%\n  # Convert the dataframe from wide to long format, so we have a\n  # column for the time, a column for the state, and a column\n  # for the proportion of the population in that state at that\n  # time\n  pivot_longer(\n    # Don't pivot the time column\n    cols = -c(time),\n    names_to = \"state\",\n    values_to = \"number\"\n  ) %>%\n  # Update the state column to be a factor, so the plot will\n  # show the states in the correct order\n  mutate(state = factor(state, levels = c(\"S\", \"I\", \"R\")))\n\nSIRcolors <- c(S = \"#1f77b4\", I = \"#ff7f0e\", R = \"#FF3851\")\n\nggplot(gil_df, aes(x = time, y = number, color = state)) +\n  geom_line(linewidth = 1.5) +\n  scale_color_manual(values = SIRcolors) +\n  labs(\n    x = \"Time\",\n    y = \"Number\",\n    color = \"State\"\n  ) +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](r-session-04_files/figure-html/unnamed-chunk-11-1.png){width=100%}\n:::\n:::\n\nBecause each realization is stochastic, we need to generate many runs to see the general behavior. \nThe code below runs 10 iterations. \nGenerally, this would be considered a very small number of iterations. \nBut even for this very small model, running 100 or more means you'll be waiting for output. \nNote that this code is designed to be transparent not to be fast. \nMaking these run fast is beyond the scope of this assignment. \n\n::: {.cell}\n\n```{.r .cell-code}\n###############################################################################\n# Simulate over time                                                          #\nM <- 10  # number of realizations to simulate \n\nfor(m in 1:M){\n  ###############################################################################\n  # Parameters and initial conditions                                            #\n  ###############################################################################\n  \n  S <- 998           # number susceptible\n  I <- 1              # number infected\n  R <- 1              # number recovered\n  time <- 0\n  iteration = m    #initialize iteration counter\n\n  beta <- .5           # transmission rate\n  gamma <- 1/7        # recovery rate\n  \n  ###############################################################################\n  # Simulate over time                                                          #\n  ###############################################################################\n  counter <- 0                # set counter at 0\n  while(all(I>0)){            #continue until I is depleted\n    counter <- counter + 1    #counter for number of transitions: we don't know how many transitions will happen until the simualtion is over\n    # \n    SIRtmp <- c(S[counter], I[counter], R[counter], time[counter])       #current SIR states\n    step <- gilstep(SIRtmp, beta, gamma)\n    if(step$change_state ==1){    # if transition is an infection, reduce S and increase I\n      SIRtmp[1] <- SIRtmp[1] - 1\n      SIRtmp[2] <- SIRtmp[2] + 1 \n    }\n    if(step$change_state ==2){    # if transition is an recovery, reduce I and increase R\n      SIRtmp[2] <- SIRtmp[2] - 1\n      SIRtmp[3] <- SIRtmp[3] + 1 \n    }\n    SIRtmp[4] <- SIRtmp[4] + step$timestep      # increment time\n    \n    #Append changes\n    S <- c(S,SIRtmp[1])\n    I <- c(I,SIRtmp[2])\n    R <- c(R,SIRtmp[3])\n    time <- c(time,SIRtmp[4])\n    iteration <- c(iteration, m)\n    \n    #cat(S[counter],\"-\",I[counter],\"-\",R[counter],\"-\",time[counter], \".\\n\"). # this prints the output as it goes\n  }\n  if(m==1){sir_gil_storage = tibble(S, I, R, time, iteration)}\n  if(m>1){sir_gil_storage = bind_rows(sir_gil_storage, tibble(S, I, R, time, iteration))}\n}\n```\n:::\n\n\n::: {.cell .column-body}\n\n```{.r .cell-code}\n# Reuse the plotting code from above\n\n# Turn the output from gilstep() into a tibble (dataframe)\n# so we can manipulate and plot it easily\ngil_df <- sir_gil_storage %>%  # put elements in a data frame \n  # Convert all columns to numeric (they are currently type\n  # deSolve so will produce warnings when plotting etc)\n  mutate(\n    # Rather than repeatedly type the same function for every\n    # column, use the across() function to apply the function\n    # to a selection of columns\n    across(\n      # The cols argument takes a selection of columns to apply\n      # a function to. Here, we want to apply the as.numeric()\n      # function to all columns, so we use the function\n      # everything() to select all columns.\n      .cols = everything(),\n      .fns = as.numeric\n    )\n  ) %>%\n  # Convert the dataframe from wide to long format, so we have a\n  # column for the time, a column for the state, and a column\n  # for the proportion of the population in that state at that\n  # time\n  pivot_longer(\n    # Don't pivot the time column\n    cols = -c(time, iteration),\n    names_to = \"state\",\n    values_to = \"number\"\n  ) %>%\n  # Update the state column to be a factor, so the plot will\n  # show the states in the correct order\n  mutate(state = factor(state, levels = c(\"S\", \"I\", \"R\")))\n\nSIRcolors <- c(S = \"#1f77b4\", I = \"#ff7f0e\", R = \"#FF3851\")\n\nggplot(gil_df, aes(x = time, y = number, color = state, group = interaction(iteration, state))) +\n  geom_line(linewidth = 1.5,alpha = .1) +\n  scale_color_manual(values = SIRcolors) +\n  labs(\n    x = \"Time\",\n    y = \"Number\",\n    color = \"State\"\n  ) +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](r-session-04_files/figure-html/unnamed-chunk-13-1.png){width=100%}\n:::\n:::\n\n\nThe Gillespie algorithm doesn't cut any corners relative to the ODE model, but that comes at the cost of computational efficiency. \nFor every event that happens (e.g. an infection) you also have to generate a random draw (e.g. a recovery) that you don't use, except for comparison.\nAnd the bigger your population, the more possible events can happen. \nSo the bigger the model (e.g. adding exposed or vaccinated classes, or heterogeneity, add transitions) and the bigger the population, the more calculation you need and and therefore the slower the model. \n\n\n## The Tau Leaping Algorithm\n\nThe Gillespie algorithm is great because it is an exact interpretation of the transitions in teh ODE model: every change of state (e.g. infection or recovery) changes the rates for the next transition.\nDoing this comes at a computational cost. \nOne reasonable approximation is the Tau Leaping algorithm. \nHere, we move in discrete chunks of time and make random draws for multiple events occurring within that chunk. \nHere the computation scales with the number of time steps (and the number of states requiring transitions). \nBut, we rely on the result that, if rates stay constant, the number events that occur in a discrete chunk of time can be approximated by a Poisson random variable.\nThus, we don't need to make random draws for every event. \nInstead we can make 1 draw for the multiple events that will occur in 1 day, or 1 week, etc. \nThe key here is the assumption that the rates stay constant; since each new infection or recovery will change the rates, we don't want \\emph{too many} to occur (in which case the rate at the start of the time step will be very different than the rate at the end of the time step). \nSo we are faced with a trade-off; very small time steps don't violate the assumptions, but the smaller the steps, the closer we are Gillespie and the smaller the computational savings. \nThere's not right answer to what time step to use. \nHere we'll use 1 day, for convenience. \n\n::: {.cell}\n\n```{.r .cell-code}\n###############################################################################\n# Parameters and initial conditions                                           #\n###############################################################################\n\nS <- 998           # number susceptible\nI <- 1              # number infected\nR <- 1              # number recovered\ntime <- 0\n\nbeta <- .5           # transmission rate\ngamma <- 1/7        # recovery rate\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n###############################################################################\n# Tau Leaping Single time step                                                            #\n###############################################################################\ntau_sir_step <- function (sims, S, I, R, beta, gamma, delta.t, ...) {\n  # adapted from Aaron King's code\n  # sims = number of simulations\n  # S = initial susceptible population\n  # I = initial infected population\n  # R = initial recovered population\n  # beta = transmission rate\n  # gamma = recovery rate\n  \n  N <- S+I+R    # total population size\n  dSI <- rpois(n = sims, beta*S*(I/N)*delta.t)  # new incident infections\n  dIR <- rpois(n = sims, gamma*I*delta.t)       # recoveries\n  # note that this can be done with a binomial step as well\n  #dSI <- rbinom(n=sims,size=S,prob=1-exp(-beta*(I/N)*delta.t))  # new incident infections\n  #dIR <- rbinom(n=sims,size=I,prob=1-exp(-gamma*delta.t))       # recoveries\n  \n  #since it is possible for the transitions to drirve the states negative, we have to prevent that\n  S <- pmax(S - dSI, 0)            # change in S\n  I <- pmax(I + dSI - dIR, 0)      # change in I\n  R <- R + dIR            # change in R\n  cbind(S, I, R, dSI) # note that dSI are the new incident infections\n}\n```\n:::\n\nNote in the code above that we're taking Poisson random draws, but there is some code commented out that uses binomial draws. \nThe former is exact for the theory, but it can give rise to settings where the transitions \"get ahead of themselves\" and you have more recoveries than infecteds, or more infections than susceptibles, which drives the states negative. \nWe can fix this by checking if the states go negative and disallowing this ... which is inelegant. \nWe can also fix this by using binomial draws, which are naturally constrained not to go negative. \nThe reason we don't automatically start with binomial draws is that they are computationally slower than Poisson draws (this occurs because the binomial distribution includes some combinatorial terms that are slow to compute). \nAs computers have gotten faster, this is less of an issue. \n\n::: {.cell}\n\n```{.r .cell-code}\n###############################################################################\n# set up and storage for states                                               #\n###############################################################################\nT <- 100        # time to simulate over. With Tau Leaping the random draws scales with time not with population size, so this is much more efficient than Gillespie for large populations\nsims <- 1000    # number of simulations: notice that we can do WAY more now\n\nSmat <- matrix(S, 1, sims)      # storage item for S for all simulations\nImat <- matrix(I, 1, sims)      # storage item for I for all simulations\nRmat <- matrix(R, 1, sims)      # storage item for R for all simulations\nnew_cases <- matrix(0, 1, sims) # storage item for new cases (i.e. incidence) for all simulations\nNmat <- S+I+R                 # storage item for N for all simulations  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n###############################################################################\n# run over a time from 2 to T                                               #\n###############################################################################\n# \nfor(ts in 2:T){     #loop over time, ts is the index\n  \n  out <- tau_sir_step(sims, Smat[ts-1,], Imat[ts-1,], Rmat[ts-1,], beta, gamma, delta.t=1) # call to SIR step function above\n\n  Smat <- rbind(Smat, out[,1])  # update state\n  Imat <- rbind(Imat, out[,2])  # update state\n  Rmat <- rbind(Rmat, out[,3])  # update state\n  Nmat <- rbind(Nmat, out[,1]+out[,2]+out[,3])  # update state -- note population size isn't changing, but this could be updated with births/deaths\n  new_cases <- rbind(new_cases, out[,4])  # update state\n}\n```\n:::\n\nHopefully you can easily see that simulating 1000 iterations of Tau Leaping is \\emph{way} faster than Gillespie. \n\n::: {.cell .column-body}\n\n```{.r .cell-code}\n###############################################################################\n# plotting                                                                   #\n###############################################################################\n# put output in a data frame\ntau_df <- tibble(S=array(Smat), I=array(Imat), R=array(Rmat), N=array(Nmat), cases=array(new_cases), time = rep(1:T,sims), iteration = rep(1:sims,each=T))\n\ntau_df <- tau_df %>%\n  pivot_longer(\n    # Don't pivot the time column\n    cols = -c(time,iteration),\n    names_to = \"state\",\n    values_to = \"number\"\n  ) %>%\n  mutate(state = factor(state, levels = c(\"S\", \"I\", \"R\",\"N\", \"cases\")))\n\nSIRcolors <- c(S = \"#1f77b4\", I = \"#ff7f0e\", R = \"#FF3851\", cases = \"#2ca02c\") # fix this color\n\ntau_df %>%\n  mutate(iteration = as.factor(iteration)) %>%\n  filter(state %in% c(\"S\", \"I\",\"R\")) %>%\n  ggplot( aes(x = time, y = number, group = interaction(iteration, state), color = state)) +\n    geom_line(linewidth = 1.5,alpha = .1) +\n    scale_color_manual(values = SIRcolors) +\n    labs(\n      x = \"Time\",\n    y = \"Number\",\n      color = \"State\"\n    ) +\n    theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](r-session-04_files/figure-html/unnamed-chunk-18-1.png){width=100%}\n:::\n:::\n\nAnd plotting the simulated trajectories should look pretty close to what we got with Gillespie. \nBut, because we can simulate many more iterations, we can start to observe some of the rarer behavior; e.g. even for simulations iwth $R_0 = 3.5$ there are some simulation runs for which the epidemic doesn't take off (S stays at 1000). \n\nNote that because we have stored the newly infected individuals as \"new cases\" then we can plot both the incidence (new cases) and prevalence (I) each day. \n\n::: {.cell .column-body}\n\n```{.r .cell-code}\n###############################################################################\n# plotting                                                                   #\n###############################################################################\n# put output in a data frame\ntau_df <- tibble(S=array(Smat), I=array(Imat), R=array(Rmat), N=array(Nmat), cases=array(new_cases), time = rep(1:T,sims), iteration = rep(1:sims,each=T))\n\ntau_df <- tau_df %>%\n  pivot_longer(\n    # Don't pivot the time column\n    cols = -c(time,iteration),\n    names_to = \"state\",\n    values_to = \"number\"\n  ) %>%\n  mutate(state = factor(state, levels = c(\"S\", \"I\", \"R\",\"N\", \"cases\")))\n\nSIRcolors <- c(S = \"#1f77b4\", I = \"#ff7f0e\", R = \"#FF3851\", cases = \"#2ca02c\") # fix this color\n\ntau_df %>%\n  mutate(iteration = as.factor(iteration)) %>%\n  filter(state %in% c(\"I\",\"cases\")) %>%\n  ggplot( aes(x = time, y = number, group = interaction(iteration, state), color = state)) +\n    geom_line(linewidth = 1.5,alpha = .1) +\n    scale_color_manual(values = SIRcolors) +\n    labs(\n      x = \"Time\",\n    y = \"Number\",\n      color = \"State\"\n    ) +\n    theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](r-session-04_files/figure-html/unnamed-chunk-19-1.png){width=100%}\n:::\n:::\n\n:::callout-note\nRecall that the time series of new incident cases is very different than the time series of prevalent cases.\nRecall from our earlier discussion that the former are more likely to be what we would see in clinical surveillance. \nThe latter are what we might see if we did random testing in the population.\nWhich one would you expect to correspond best to environmental wastewater surveillance?\n::::\n\n## The Chain Binomial Algorithm\n\nIn the last section, we saw that by moving from continuous time to discrete time steps, we limit the complexity (the number of stochastic evaluations scales with time and the number of states, instead of population size and the number of states). \nYou may have also noticed that the individual steps in the Tau Leaping algorithm can be modeled as Poisson or Binomial random variables.\nCombining these two gives us another common algorithm for stochastic simulation, the Chain Binomial model. \nHere, we simplify further and use a time step that is equal to the infectious generation period; e.g. 2 weeks for measles, or 1 week for flu. \nIf we assume that time progresses in discrete, non-overlapping generations, then those that get infected at the start of one time step, recover at the end of that time step. \nThis simplification means that we only have to model the infection process as stochastic, and the recovery process at the end of the time step is now deterministic. \nThis is obviously unrealistic, but makes the model much simpler for formal statistical model fitting using likelihood and Bayesian methods. \nSo while it is imperfect, it remains as a common method for \"first-pass\" analyses.\n\nAs before, we start with initial conditions.\nHere we initialize with the same population as before, but notice that the transmission rate, $\\beta$ is different.\nTime is rescaled here to units of epidemic generation time, so $\\beta$ is scaled correspondingly and now, for this formulation, $\\beta$ is $R_0$. \n\n::: callout-note\nRecall that the basic reproduction number, $R_0$ is a function of the pathogen and the population of interest.\nIn models, both the population (e.g. mixing, heterogeneity, etc) and the pathogen (e.g. time-scale of recovery) are represented using approximations to the biology. \nHere, the choice of model forces a change in time-scale which means that we have to change $\\beta$ accordingly; thus, $\\beta$, which is ostensibly a biological parameter is also a property of the model. \n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n###############################################################################\n# Parameters and initial conditions                                           #\n###############################################################################\nS <- 998           # number susceptible\nI <- 1              # number infected\nR <- 1              # number recovered\ntime <- 0\n\nbeta <- 3.5           # transmission rate -- note the change in value\n```\n:::\n\nWhen we implement the forward simulation, we now only have to generate random draws for the infection process, which again simplifies the amount of stochastic simulation we have to do, and speeds up run times. \nWhile this might not be limiting in the scale of this activity, this DOES become an issue when we have to fit stochastic models. \nRecall from the lecture on parameter estimation that the basic recipe has us build a model and test out all, or many, values of the parameters (here $\\beta$) to find which one is closest to the data. \nHere, because each run of the stochastic simulation is different, we need to run simulations over many possible parameters, and for each parameter, we need to run many stochastic runs to characterize the average, or most likely, behavior. \nSo, the number of simulations can rapidly increase into the millions (bigger for models with more parameters), so every bit of savings in computational time can be valuable. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n###############################################################################\n# Single time step                                                            #\n###############################################################################\ncb_step <- function (sims, S, I, R, beta, ...) {\n  # S = initial susceptible population\n  # I = initial infected population\n  # R = initial recovered population\n  # beta is transmission rate\n  \n  N <- S+I+R    # total population size\n  newI <- rbinom(n=sims, pmax(S,0), 1-exp(-beta * pmax(I,0)/N)) # this is the only stochastic step; only do draw if I >0\n  newS <- S - newI    #this step is now deterministic, because everyone from the past time step recovers   \n  newR <- R + I\n\n  cbind(newS, newI, newR) \n}\n```\n:::\n\nThen we can run the simulation over a set of discrete time steps, T. \nNote again that T is now the number of infectious generation times, since time is rescaled relative to the models above. \n\n::: {.cell}\n\n```{.r .cell-code}\n###############################################################################\n# Run over many steps                                                         #\n###############################################################################\n\nT <- 20 # note here that the time step is one infectious generation time, so 7 days from gamma above\nsims <- 1000\n  \nSmat <- matrix(S,1,sims)      # storage item for S for all simulations\nImat <- matrix(I,1,sims)      # storage item for I for all simulations\nRmat <- matrix(R,1,sims)      # storage item for R for all simulations\nNmat <- S+I+R\n\nfor(ts in 2:T){\n  out <- cb_step(sims, Smat[ts-1,], Imat[ts-1,], Rmat[ts-1,], beta)\n  Smat <- rbind(Smat, out[,1])  # update state\n  Imat <- rbind(Imat, out[,2])  # update state\n  Rmat <- rbind(Rmat, out[,3])  # update state\n  Nmat <- rbind(Nmat, out[,1]+out[,2]+out[,3])  # update state -- note population size isn't changing, but this could be updated with births/deaths\n  \n}\n```\n:::\n\nWe can plot, but note again, that this is plotted in terms of epidemic generations on the X-axis, rather than days (as in the previous sections).\n\n\n::: {.cell .column-body}\n\n```{.r .cell-code}\n# put output in a data frame\nbin_df <- tibble(S=array(Smat), I=array(Imat), R=array(Rmat), N=array(matrix(Nmat)), time = rep(1:T,sims), iteration = rep(1:sims,each=T))\n\nbin_df = bin_df %>%\n  pivot_longer(\n    # Don't pivot the time column\n    cols = -c(time,iteration),\n    names_to = \"state\",\n    values_to = \"number\"\n  ) %>%\n  mutate(state = factor(state, levels = c(\"S\", \"I\", \"R\",\"N\")))\n\nSIRcolors <- c(S = \"#1f77b4\", I = \"#ff7f0e\", R = \"#FF3851\") # fix this color\n\nbin_df %>%\n  mutate(iteration = as.factor(iteration)) %>%\n  filter(state %in% c(\"S\",\"I\",\"R\")) %>%\n  ggplot( aes(x = time, y = number, group = interaction(iteration, state), color = state)) +\n    geom_line(linewidth = 1.5,alpha = .1) +\n    scale_color_manual(values = SIRcolors) +\n    labs(\n      x = \"Time\",\n    y = \"Number\",\n      color = \"State\"\n    ) +\n    theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](r-session-04_files/figure-html/unnamed-chunk-23-1.png){width=100%}\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}