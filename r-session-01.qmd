---
format:
  html:
    page-layout: full
execute:
    echo: false
---

# R Session 01 

```{ojs}
//| panel: input
viewof beta = Inputs.range(
  [0.0, 2.0],
  {value: 0.25, step: 0.01, label: "Infectivity rate"}
)
viewof dur_inf = Inputs.range(
  [0.0, 20],
  {value: 8.0, step: 0.5, label: "Duration of Infection (days)"}
)

viewof I0 = Inputs.range(
  [0.0, 1.0],
  {value: 0.01, step: 0.01, label: "Initial fraction infected"}
)

viewof area = Inputs.toggle(
  {label: "Cumulative Area plot", value: false}
)

R0 = beta * dur_inf

md`${tex`R_0 = ${R0.toLocaleString(undefined, {minimumFractionDigits: 2})}`}`
```


```{ojs}
function sir(dydt, y, t) {
  var gamma = 1 / dur_inf

  dydt[0] = -beta * y[0] * y[1]
  dydt[1] = beta * y[0] * y[1] - gamma * y[1]
  dydt[2] = gamma * y[1]
}
```

```{ojs}
import {odeRK4} from '@rreusser/integration@3064'
import { aq, op } from '@uwdata/arquero'
```

```{ojs}
function simulate(f, t0, y0, dt, tmax) {
  var t = t0
  var y = y0
  var i = 0

  var tsim = [t0]
  var ysim = [y0]

  for (t = t0 + dt; t <= tmax; t += dt) {
    ysim.push(odeRK4([], ysim[i], f, dt))
    tsim.push(t)
    i += 1
  }
  
  return aq.table({
    t: tsim,
    S: ysim.map(d => d[0]),
    I: ysim.map(d => d[1]),
    R: ysim.map(d => d[2])
    })
}
```

```{ojs}
sir_sol = simulate(sir, 0, [1.0-I0, I0, 0.0], 0.01, 200)
sir_sol_long = sir_sol.fold(aq.not('t'), {as: ['State', 'Fraction']})
```

::: {.panel-tabset}

## Plot

```{ojs}
Plot.plot({
  color: {legend: true, domain: ["S", "I", "R"]},
  grid: true,
  width: 1000,
  height: 600,
  marks: [
    area ?
      Plot.areaY(sir_sol_long, {x: "t", y: "Fraction", fill: "State"}) :
      Plot.lineY(sir_sol_long, {x: "t", y: "Fraction", stroke: "State", strokeWidth: 3})
  ]
})
```

## Data

```{ojs}
sir_sol.view()
```

:::